Accumulated knowledge
wrapper classes: Byte, Short, Character, Integer, Long, Float, Double, Boolean.
What are they needed for? - Answer:

applications with command line arguments
Why is this necessary? - Answer:

String class and its methods
Why is this necessary? - Answer:

TDD - test driven development Unit tests
Why is this necessary? - Answer:

Algorithm for conducting Unit tests

Select/create a directory for unit testing (usually in the directory where there is a class under test, and in it there are methods to be tested)

Create a new class (java file) in this directory with the name ClassNameTest

Import libraries into this Class (file): import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test;

We connect the class under test and its methods with a line like: ClassNameClassName; // this is a new field in the class ClassNameTest, in which the object of the class being tested is connected.

Directive @BeforeEach void setUp(){ ClassName = new ClassName(); // create an instance of the tested class object before each test }

Directives @Test @DisplayName("This text can describe what we are testing")

create a method that calls assert... (estimated: expected value, actual: call of the method under test, "Message (explanation) about ...")

Example: void testMultiply(){ assertEquals(20,calculator.multiply(4,5),"4*5 should be 20"); }

Run the test

Накопленные знания
классы-обертки: Byte, Short, Character, Integer, Long, Float, Double, Boolean.
Зачем они нужны? - Ответ: в них много удобных и полезных методов. Подробности - в документации.

приложения с аргументами командной строки
Зачем это нужно? - Ответ: чтобы понимать по метод main и его аргументы, это полезно знать.

класс String и его методы
Зачем это нужно? - Ответ: "лексический разбор", проверка строк, обеспечение "безопасности", конверсия типов (например, строку "12345" преобразуем в тип int и наоборот) и парсинг (выделение в строке элементов и их распознавание).

TDD - test driven development Unit tests
Зачем это нужно? - Ответ: для тестирования методов более интенсивным путем, чем запуск приложений. Можно запускать каждый отдельный метод и разные случаи его работы. Можно тестировать вложенные и сложные методы. Тестирование упрощает написание кода (test driven development)!

Алгоритм проведения Unit тестов

Выбрать/создать директорию для проведения Unit-тестирования (обычно - в директории где находится тестируемый класс, а в нем - тестируемые методы)

Создать в этой директории новый класс (java-файл) с наименованием ИмяКлассаTest

Выполнить в этот Класс (файл) импорт библиотек: import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test;

Подключаем тестируемый класс и его методы строкой вида: ИмяКласса имяКласса; // это новое поле в классе ИмяКлассаTest, в котором подключается объект тестируемого класса.

Директива @BeforeEach void setUp(){ имяКласа = new имяKласса(); // создаем экземпляр объекта тестируемого класса перед каждым тестом }

Директивы @Test @DisplayName("В этом тексте можно описать то, что мы тестируем")

создать метод, вызывающий assert... (estimated: ожидаемое значение, actual: вызов тестируемого метода, "Сообщение(пояснение) о ...")

Пример:
void testMultiply(){ assertEquals(20,calculator.multiply(4,5),"4*5 should be 20"); }

Запустить тест