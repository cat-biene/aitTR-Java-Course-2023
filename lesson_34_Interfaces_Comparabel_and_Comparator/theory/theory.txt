In Java, you can parameterize not only classes and interfaces, but also individual methods. In this case, the parameter is specified in the method signature in angle brackets - <>. For parameterized methods, the specific type is determined at the time of calling the method.
To sort an array of objects, you need to define a rule for comparing objects. That is, there should be a method that determines which of the two objects is conditionally larger, smaller or equal.
In Java, there is an interface Comparable with a single abstract method int compareTo(T e). It is agreed that if the compareTo method returns a positive number, then the current object (this) is conditionally larger than the method argument. If it returns a negative number, then it is conditionally smaller. If zero, then this and the accepted argument are the same according to the comparison criterion specified in the method.
In Java, there is an interface Comparator with a single abstract method int compare(T e1, T e2). The principle of operation is the same as in the Comparable interface, only here we compare not this and argument (e), but two arguments (e1 and e2).
Using the Comparable and Comparator interfaces, you can sort arrays of objects. If all elements of the array are Comparable, then when sorting, we decide whether or not to swap two elements of the array based on the result of the compareTo method. If, for sorting, in addition to the array itself, an object of type Comparator is passed, then we decide on swapping elements of the array based on the result of the compare method.
В Java можно параметризовать не только классы и интерфейсы, но и отдельные методы. В этом случае параметр указывается в сингатуре метода в угловых скобках - <>. Для параметризованных методов, конкретный тип определяется в момент вызова метода.
Для сортировки массива объектов, надо определить правило сравнения объектов. Т. е. должен быть метод, который определяет какой из двух объектов условно больше, меньше или объекты равны.
В Java существует интерфейс Comparable с единственным абстрактным методом int compareTo(T e). Договорились, что если метод compareTo возвращает положительное число, то текущий объект (this) условно больше аргумента метода. Если возвращает отрицательное число, то условно меньше. Если ноль, то this и принимаемый аргумент одинаковы согласно указанному в методе критерию сравнения.
В Java существует интерфейс Comparator с единственным абстрактным методом int compare(T e1, T e2). Принцип работы такой же как и в интерфейсе Comparable, только здесь сраниваем не this и аргумент (е), а два аргумента (е1 и е2).
Используя интерфейсы Comparable и Comparator, можно сортировать массивы объектов. Если все элементы массива Comparable, то при сортировке, решение менять или не менять местами два элемента массива принимаем на основе результата работы метода compareTo. Если для сортировки, кроме самого массива, передан объект типа Comparator, то решение о перестановке элементов массива, принимаем на основе результата работы метода compare.
