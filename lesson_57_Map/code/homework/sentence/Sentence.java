package homework.sentence;
// Посчитайте количество повторяющихся букв в предложении Л.Н. Толстого.

import java.util.HashMap;
import java.util.Map;

// Count the number of repeated letters in L.N.’s sentence. Tolstoy.
public class Sentence {

    public static void main(String[] args) {

        String sentence = "В 1800-х годах, в те времена, когда не было еще ни железных, ни шоссейных дорог, ни газового, ни стеаринового света, ни пружинных низких диванов, ни мебели без лаку, ни разочарованных юношей со стеклышками, ни либеральных философов-женщин, ни милых дам-камелий, которых так много развелось в наше время, – в те наивные времена, когда из Москвы, выезжая в Петербург в повозке или карете, брали с собой целую кухню домашнего приготовления, ехали восемь суток по мягкой, пыльной или грязной дороге и верили в пожарские котлеты, в валдайские колокольчики и бублики, – когда в длинные осенние вечера нагорали сальные свечи, освещая семейные кружки из двадцати и тридцати человек, на балах в канделябры вставлялись восковые и спермацетовые свечи, когда мебель ставили симметрично, когда наши отцы были еще молоды не одним отсутствием морщин и седых волос, а стрелялись за женщин и из другого угла комнаты бросались поднимать нечаянно и не нечаянно уроненные платочки, наши матери носили коротенькие талии и огромные рукава и решали семейные дела выниманием билетиков, когда прелестные дамы-камелии прятались от дневного света, – в наивные времена масонских лож, мартинистов, тугендбунда, во времена Милорадовичей, Давыдовых, Пушкиных, – в губернском городе К. был съезд помещиков, и кончались дворянские выборы.";

        printSentenceFrequency(sentence);
    }

    private static void printSentenceFrequency(String sentence) {

        // удаляем все символы, кроме букв
        sentence = sentence.replaceAll("[^a-яё]", "");
        // приводим к нижнему регистру
        sentence = sentence.toLowerCase();
        System.out.println(sentence);
        System.out.println();

        System.out.println("Frequency of occurrence of letters: ");
        Map<Character, Integer> resultMap = new HashMap<>();// Здесь HashMap создается для хранения частоты каждого символа (буквы). Ключ имеет тип Character, представляющий букву, а значение имеет тип Integer, представляющий частоту этой буквы.
        for (int i = 0; i < sentence.length(); i++) { // цикл перебирает каждый символ
            char letter = sentence.charAt(i);
            resultMap.put(letter, resultMap.getOrDefault(letter, 0) + 1);
        } // Этот цикл перебирает каждый символ в заданном sentence. Для каждого символа ( letter) обновляется файл resultMap. Метод getOrDefault используется для получения текущей частоты появления буквы. Если буква отсутствует на карте, по умолчанию она равна 0. Затем частота увеличивается на 1, и обновленная частота возвращается обратно на карту.

        for (Map.Entry<Character, Integer> entry : resultMap.entrySet()) {
            System.out.println("Letter: " + entry.getKey() + ", Frequency: " + entry.getValue());
        } // После заполнения resultMapэтот цикл перебирает записи карты, используя resultMap.entrySet(). Для каждой записи он выводит на консоль букву и соответствующую ей частоту. Это обеспечивает четкий вывод, показывающий частоту каждой буквы в данном предложении.
    }
}
