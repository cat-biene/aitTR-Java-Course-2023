//Сортировка:
//HashSet не сохраняет порядок элементов, они хранятся в неопределенном порядке.
// TreeSet хранит элементы в отсортированном порядке с использованием компаратора или естественного порядка (если элементы реализуют интерфейс Comparable).

//Сложность операций:
// HashSet имеет временную сложность O(1) для большинства операций (добавление, удаление, поиск) в среднем случае, хотя может быть O(n) в худшем случае для поиска.
//TreeSet обеспечивает O(log n) для большинства операций (добавление, удаление, поиск), так как элементы хранятся в отсортированном порядке с использованием бинарного дерева.

//Дубликаты и уникальность:
//HashSet не допускает дубликатов и хранит только уникальные элементы.
//TreeSet также хранит только уникальные элементы, и они автоматически упорядочиваются.

//Память:
//HashSet требует меньше памяти, чем TreeSet, так как в TreeSet дополнительно хранится информация о порядке элементов.
//Таким образом, недостатком HashSet по сравнению с TreeSet является отсутствие гарантированной сортировки элементов и, в некоторых случаях, более высокая сложность поиска (в среднем). Однако HashSet может быть более эффективным с точки зрения производительности для операций добавления, удаления и поиска в среднем случае, особенно при больших объемах данных, где конкретный порядок элементов не критичен.